<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"  
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	version="EE-3.7.0"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    
    <batch:job name="syncBatchA" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
        	
        	<!-- Steps to synchronize data from A to B -->
        	
            <batch:step name="forEachContactInAGetContactInBStep" >
                <enricher   doc:name="set Id and LastModifiedDate from matching account">
	                <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from B instance"/>
                <enrich source="payload == null ? null : payload.Id" target="payload.Id"/>
                    <enrich source="payload == null ? null : payload.LastModifiedDate" target="payload.LastModifiedDateB"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInBSetp" accept-expression="'syncAccount' == '${account.sync.policy}'">
                <enricher source="#[payload == null ? null : payload.Id]" target="#[payload.AccountId]" doc:name="store result in 'payload.AccountId'">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="query account in B instance"/>
                </enricher>
                <flow-ref name="findOrCreateAccountFlow" doc:name="call findOrCreateAccountFlow"/>

            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInB" accept-expression="payload.Id == null ? true : (payload.LastModifiedDate &gt; payload.LastModifiedDateB)">

                <batch:commit size="200" doc:name="Batch Commit">
			        <dw:transform-message doc:name="prepare Contacts for upsert">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	Id: $.Id,
	Email: $.Email,
	Description: $.Description,
	FirstName: $.FirstName,
	LastName: $.LastName,
	MailingCountry: $.MailingCountry,
	Title: $.Title,
	(AccountId: $.AccountId) when ($.AccountId != null) 
}]]></dw:set-payload>
                    </dw:transform-message>
			        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Contact" doc:name="upsert contacts in B">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>


        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>	
    </batch:job>
    <batch:job name="syncBatchB" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>

            
			<!-- Steps to synchronize data from B to A -->
			            
            <batch:step name="forEachContactInBGetContactInAStep" >
                <enricher   doc:name="set Id and LastModifiedDate from matching account">
	                <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, FirstName, LastName, Email, LastModifiedDate FROM Contact WHERE (Email LIKE '#[payload['Email']]')" doc:name="query contact from A instance"/>
                <enrich source="payload == null ? null : payload.Id" target="payload.Id"/>
                    <enrich source="payload == null ? null : payload.LastModifiedDate" target="payload.LastModifiedDateA"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInASetp" accept-expression="'syncAccount' == '${account.sync.policy}'">
                <enricher source="#[payload == null ? null : payload.Id]" target="#[payload.AccountId]" doc:name="store result in 'payload.AccountId'">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name FROM Account WHERE Name = '#[payload['Account']['Name']]'" doc:name="query account in A instance"/>
                </enricher>
                <flow-ref name="findOrCreateAccountFlow" doc:name="call findOrCreateAccountFlow"/>

            </batch:step>
            <batch:step name="forEachContactThatShouldBeUpsertedInA" accept-expression="payload.Id == null ? true : (payload.LastModifiedDate &gt; payload.LastModifiedDateA)">

                <batch:commit size="200" doc:name="Batch Commit">
			        <dw:transform-message doc:name="prepare Contacts for upsert">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	Id: $.Id,
	Email: $.Email,
	Description: $.Description,
	FirstName: $.FirstName,
	LastName: $.LastName,
	MailingCountry: $.MailingCountry,
	Title: $.Title,
	(AccountId: $.AccountId) when ($.AccountId != null) 
}]]></dw:set-payload>
                    </dw:transform-message>
			        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Contact" doc:name="upsert contacts in A">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>            
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="unlock processing"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    
    <sub-flow name="findOrCreateAccountFlow" >

        <choice doc:name="Choice">
            <when expression="#[payload['AccountId'] == null]">
                <enricher target="#[payload['AccountId']]" doc:name="store result in 'payload.AccountId'" source="#[payload.getId()]">
            <processor-chain doc:name="Processor Chain">
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	AccountNumber: payload.Account.AccountNumber,
	Description : payload.Account.Description,
	Name: payload.Account.Name,
	(NumberOfEmployees : payload.Account.NumberOfEmployees as :number) when (payload.Account.NumberOfEmployees != null),
	Industry: payload.Account.Industry
}]]></dw:set-payload>
                </dw:transform-message>

                <sfdc:create-single config-ref="SalesforceB" type="Account" doc:name="create Account in Salesforce Instance B">

                </sfdc:create-single>

            </processor-chain>
        </enricher>
            </when>
            <otherwise>
                <logger message="Account already exists. Nothing to create." level="INFO" doc:name="Logger"/>

            </otherwise>
        </choice>

    </sub-flow>

    
</mule>
