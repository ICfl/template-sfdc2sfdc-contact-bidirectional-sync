<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Salesforce Contact Bidirectional Synchronization</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to have my Contacts synchronized between two different Salesforce orgs.

This Template should serve as a foundation for setting an online bi-directional sync of Contacts between two SalesForce instances, being able to specify filtering criterias. 

The integration main behaviour is polling for changes (new Contacts or modified ones) using scheduler component that have occurred in any of the Salesforces instances during a certain defined period of time. For those Contacts that both have not been updated yet the integration triggers an upsert (update or create depending the case) taking the last modification as the one that should be applied.

Requirements have been set not only to be used as examples, but also to establish starting point to adapt the integration to any given requirements.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="run_it">
<![CDATA[
In order to have your application up and running you just need to complete two simple steps:
 1. [Configure the application properties](#propertiestobeconfigured)
 2. Run it! ([on premise](#runonopremise) or [in Cloudhub](#runoncloudhub))
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
In order to [create your application on CloudHub](http://www.mulesoft.org/documentation/display/current/Hello+World+on+CloudHub) 
you should to go to Deployment > Advanced to set all environment variables detailed in **Properties to be configured** as well as the **mule.env**. 
]]>
		</section>
		<section id="default_running_on_standalone">
<![CDATA[
Fill in all properties in one of the property files, for example in [mule.dev.properties] (./src/main/resources/mule.dev.properties) and run your app 
with the corresponding environment variable to use it. To follow the example, this will be `mule.env=dev`.
]]>
		</section>
		<section id="application_configuration">
<![CDATA[
#### Application configuration

+ scheduler.frequency `10000`  
This are the milliseconds that will run between two different checks for updates in either Salesforce instance

+ scheduler.startDelay `0`

+ watermark.default.expression `2018-02-25T11:00:00.000Z`  
This property is an important one, as it configures what should be the start point of the synchronization. If the use case includes synchronization of every 
contact created from the begining of the times, you should use a date previous to any contact creation (perhaphs `1900-01-01T08:00:00.000Z` is a good choice). 
If you want to synchronize the contacts created from now on, then you should use a default value according to that requirement (for example, 
if today is April 21st of 2018 and it's eleven o'clock in London, then you could use the following value `2018-04-21T11:00:00.000Z`).

+ page.size `1000`

+ account.sync.policy `syncAccount`
**Note:** the property **account.sync.policy** can take any of the two following values: 
+ **empty_value**: if the propety has no value assigned to it then application will do nothing in what respect to the account and it'll just move the contact over.
+ **syncAccount**: it will try to create the contact's account when it is not pressented in the Salesforce instance B.

#### SalesForce Connector configuration for company A**

+ sfdc.a.username `jorge.drexler@mail.com`
+ sfdc.a.password `Noctiluca123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.url `https://login.salesforce.com/services/Soap/u/40.0`
+ sfdc.a.integration.user.id `A0ed000BO9T`

	**Note:** To find out the correct *sfdc.a.integration.user.id* value, please, refer to example project **Salesforce Data Retrieval** in [Anypoint Exchange](http://www.mulesoft.org/documentation/display/current/Anypoint+Exchange).

#### SalesForce Connector configuration for company B**

+ sfdc.b.username `mariano.cozzi@mail.com`
+ sfdc.b.password `LaRanitaDeLaBicicleta456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.b.url `https://login.salesforce.com/services/Soap/u/40.0`
+ sfdc.b.integration.user.id `B0ed000BO9T`

	**Note:** To find out the correct *sfdc.b.integration.user.id* value, please, refer to example project **Salesforce Data Retrieval** in [Anypoint Exchange](http://www.mulesoft.org/documentation/display/current/Anypoint+Exchange).
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Not relevant for this use case.
]]> 
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This file should contain every inbound and outbound endpoint of your integration app. 
In this particular template, this file contains a scheduler endpoint that query Salesforce A and Salesforce B for updates using watermark .
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
This file holds the functional aspect of the template. Its main component is a [Batch Job](http://www.mulesoft.org/documentation/display/current/Batch+Processing), and it includes steps for both executing the synchronization from Salesforce A to Salesforce B, and the other way around.
]]>
		</section>
		<section id="default_error_handling_xml">
		<![CDATA[
		This is the right place to handle how your integration will react depending on the different exceptions. 
This file holds a [Error Handling](http://www.mulesoft.org/documentation/display/current/Error+Handling) that is referenced by the scheduler flow in the endpoints xml file.]]>
		</section>
	</sections>
</configuration>
